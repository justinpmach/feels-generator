/* eslint-disable @next/next/no-img-element */
/* eslint-disable jsx-a11y/alt-text */
import { Button } from "@chakra-ui/react";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import React, { useState } from "react";
// import { Button } from "~/component/Button";
// import Carousel from "~/component/Carousel";
import { FormGroup } from "~/component/FormGroup";
import { Input } from "~/component/Input";
import { api } from "~/utils/api";

import { motion, AnimatePresence } from "framer-motion";
import TestPage from "./test";

const colors = [
  "blue",
  "red",
  "pink",
  "green",
  "orange",
  "yellow",
  "white",
  "black",
];

const shapes = ["square", "circle", "triangle", "diamond"];

const styles = [
  "claymorphic",
  "3d rendered",
  "pixelated",
  "illustrated color pencil",
];

const questions = [
  { question: "Describe the image you want to output" },
  { question: "Pick Image Color" },
  { question: "Pick Image Shape" },
  { question: "Pick Image Style" },
  { question: "Pick Image Quantity" },
];

const GeneratePage: NextPage = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [form, setForm] = useState({
    prompt: "",
    color: "",
    shape: "",
    style: "",
    quantity: "1",
  });
  const [error, setError] = useState("");
  const [showQuestion, setShowQuestion] = useState(0);
  const [imagesUrl, setImagesUrl] = useState<{ imageUrl: string }[]>([]);

  const generateImage = api.generate.generateImage.useMutation({
    onSuccess(data) {
      setImagesUrl(data);
    },
    onError(error) {
      setError(error.message);
    },
  });

  function handleFormSubmit(e: React.FormEvent) {
    e.preventDefault();
    setError("");
    // submit form data to backend
    generateImage.mutate({
      ...form,
      quantity: parseInt(form.quantity),
    });

    // setForm((prev) => ({ ...prev, prompt: "" }));
    //
  }
  function updateForm(key: string) {
    return function (e: React.ChangeEvent<HTMLInputElement>) {
      setForm((prev) => ({
        ...prev,
        [key]: e.target.value,
      }));
    };
  }

  const prevSlide = () => {
    setCurrentIndex((current) =>
      current === 0 ? questions.length - 1 : current - 1
    );
  };
  const nextSlide = () => {
    // onToggle();
    setCurrentIndex((current) =>
      current === questions.length - 1 ? 0 : current + 1
    );
  };

  function handleSlides(index: number) {
    return currentIndex === index;
  }
  return (
    <>
      <Head>
        <title>Generate Feels Image</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>

      <main>
        <div className="container mt-12 flex min-h-screen flex-col gap-4 px-8">
          <h1 className="text-3xl">Generate Your Image</h1>

          <form
            className="flex min-h-screen w-full flex-col"
            onSubmit={handleFormSubmit}
          >
            {/* <AnimatePresence>
              {questions.map(
                (q, index) =>
                  handleSlides(index) && (
                    <motion.div
                      key={q.question}
                      className="box bg-blue-400 text-black"
                      initial={{ translateX: "100%", opacity: 1 }}
                      animate={{ translateX: 0, opacity: 1 }}
                      exit={{
                        translateX: "-100%",
                        transition: { duration: 0.1 },
                      }}
                      transition={{ duration: 0.2, ease: "easeInOut" }}
                    > */}
            {questions.map((q, index) => (
              <>
                {currentIndex === 0 && (
                  <TestPage active={handleSlides(index)}>
                    <FormGroup>
                      <label key={index}>{q.question}</label>
                      <Input
                        required
                        value={form.prompt}
                        onChange={updateForm("prompt")}
                      />
                    </FormGroup>
                  </TestPage>
                )}

                {currentIndex === 1 && (
                  <TestPage active={handleSlides(index)}>
                    <FormGroup>
                      <label key={index}>{q.question}</label>
                      {colors.map((color) => (
                        <label key={color} className="flex gap-2 text-2xl">
                          <input
                            required
                            type="radio"
                            name="color"
                            checked={color === form.color}
                            onChange={() =>
                              setForm((prev) => ({ ...prev, color }))
                            }
                          ></input>
                          {color}
                        </label>
                      ))}
                    </FormGroup>
                  </TestPage>
                )}

                {currentIndex === 2 && (
                  <TestPage active={handleSlides(index)}>
                    <FormGroup>
                      {shapes.map((shape) => (
                        <label key={shape} className="flex gap-2 text-2xl">
                          <input
                            required
                            type="radio"
                            name="color"
                            checked={shape === form.shape}
                            onChange={() =>
                              setForm((prev) => ({ ...prev, shape }))
                            }
                          ></input>
                          {shape}
                        </label>
                      ))}
                    </FormGroup>
                  </TestPage>
                )}

                {currentIndex === 3 && (
                  <TestPage active={handleSlides(index)}>
                    <FormGroup>
                      <label key={index}>{q.question}</label>

                      {styles.map((style) => (
                        <label key={style} className="flex gap-2 text-2xl">
                          <input
                            required
                            type="radio"
                            name="color"
                            checked={style === form.style}
                            onChange={() =>
                              setForm((prev) => ({ ...prev, style }))
                            }
                          />
                          {style}
                        </label>
                      ))}
                    </FormGroup>
                  </TestPage>
                )}

                {currentIndex === 4 && (
                  <TestPage active={handleSlides(index)}>
                    <FormGroup>
                      <label key={index}>{q.question}</label>

                      <Input
                        required
                        inputMode="numeric"
                        pattern="[1-9]|10"
                        value={form.quantity}
                        onChange={updateForm("quantity")}
                      ></Input>
                    </FormGroup>
                  </TestPage>
                )}
              </>
            ))}
            <div className="mt-30 flex-col-2 mx-auto flex flex-wrap justify-center gap-4">
              <Button
                className="z-20"
                disabled={currentIndex === 0}
                onClick={prevSlide}
              >
                Back
              </Button>
              {currentIndex === 4 ? (
                <Button
                  className="z-20"
                  disabled={generateImage.isLoading}
                  isLoading={generateImage.isLoading}
                >
                  Submit
                </Button>
              ) : (
                <Button className="z-20" onClick={nextSlide}>
                  Next
                </Button>
              )}
            </div>
            {/* <label>
                            {currentIndex + 1}. + {q}
                          </label> */}
            {/* </motion.div>
                  )
              )}
            </AnimatePresence> */}
            {/* </Box>
               </Slide> */}

            {error && (
              <div className="rounded bg-red-500 px-8 py-4 text-xl text-white">
                {error}
              </div>
            )}
          </form>

          {imagesUrl.length > 0 && (
            <>
              <h2 className="text-xl">Your Images</h2>
              <section className="mb-12 grid grid-cols-4 gap-4">
                {imagesUrl.map(({ imageUrl }) => (
                  <Image
                    key={imageUrl}
                    src={imageUrl}
                    alt="an image of generated prompt"
                    width="512"
                    height="512"
                    className="w-full"
                  />
                ))}
              </section>
            </>
          )}
        </div>
      </main>
    </>
  );
};

export default GeneratePage;
